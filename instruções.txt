Prompt de Instruções Detalhadas do Sistema
1. Visão Geral
O sistema é uma aplicação desktop (Electron + React + TailwindCSS) para controle de atendimentos técnicos, anexos e relatórios, com persistência em banco PostgreSQL (Neon) e suporte a SQLite local. O frontend é React, com navegação via React Router e autenticação simples.

2. Estrutura do Projeto
electron/: Backend Node.js/Electron, integra banco de dados, lógica de negócio e IPC.
src/: Frontend React, componentes, páginas, contextos, serviços e utilitários.
uploads/: Diretório para arquivos anexados.
Output/: Binários gerados.
Configuração: electron.config.js, vite.config.ts, tailwind.config.js, package.json.
3. Backend (Electron)
3.1. Banco de Dados
PostgreSQL (Neon) por padrão, com fallback para SQLite local.
Tabelas principais:
users: Usuários do sistema.
service_records: Atendimentos técnicos.
attachments: Anexos dos atendimentos.
service_record_history: Histórico de alterações.
3.2. Rotas/IPC Handlers
Expostos via preload.js:

Usuários
getUsers, addUser
Atendimentos
getServiceRecords, addServiceRecord, updateServiceRecord, deleteServiceRecord
Anexos
getAttachments, addAttachment, deleteAttachment, getAttachmentFile
Configuração
getStoreValue, setStoreValue
Importação
importExcel
4. Frontend (React)
4.1. Páginas
LoginPage: Login e registro de usuário (src/pages/LoginPage.tsx)
DashboardPage: Visão geral, estatísticas e últimos atendimentos (src/pages/DashboardPage.tsx)
ServiceRecordsPage: Listagem, busca e filtro de atendimentos (src/pages/ServiceRecordsPage.tsx)
ServiceRecordFormPage: Cadastro/edição de atendimento (src/pages/ServiceRecordFormPage.tsx)
ServiceRecordDetailPage: Detalhes completos do atendimento, anexos, histórico (src/pages/ServiceRecordDetailPage.tsx)
ReportsPage: Relatórios, filtros, exportação/importação Excel (src/pages/ReportsPage.tsx)
AttachmentsPage: Busca e visualização de anexos (src/pages/AttachmentsPage.tsx)
SettingsPage: Configuração de caminhos, banco, redefinição de senha (src/pages/SettingsPage.tsx)
4.2. Componentes
UI: ui (Button, Card, Input, Select, Textarea, FileUpload)
Layout: Sidebar, AppLayout (src/components/layout/Sidebar.tsx, src/components/layout/AppLayout.tsx)
Auth: LoginForm, RegisterForm (src/components/auth/)
4.3. Contextos/Serviços
AuthContext: Gerencia autenticação (src/contexts/AuthContext.tsx)
Services: Comunicação com backend via window.electronAPI (src/services/)
5. Funcionalidades
Autenticação: Login/registro simples.
CRUD de Atendimentos: Cadastro, edição, exclusão, visualização detalhada.
Anexos: Upload, download, visualização e exclusão de arquivos vinculados ao atendimento.
Relatórios: Filtros avançados, exportação/importação Excel.
Dashboard: Estatísticas rápidas e últimos atendimentos.
Configurações: Caminhos de banco/anexos, redefinição de senha, variáveis de ambiente.
Offline Sync: Suporte a dados offline (em desenvolvimento).
Histórico: Registro de alterações dos atendimentos (opcional).
6. Passo a Passo de Criação
Configuração do Projeto

Instale dependências com npm install.
Configure variáveis de ambiente e caminhos em SettingsPage.
Banco de Dados

Estruture tabelas conforme db.sql.
Garanta a criação automática das tabelas ao iniciar o Electron (electron/main.js).
Backend Electron

Implemente handlers IPC para CRUD de usuários, atendimentos e anexos.
Importe/exporte dados via ExcelJS.
Exponha métodos via preload.js.
Frontend React

Estruture rotas em App.tsx usando HashRouter.
Implemente páginas e componentes conforme design.
Utilize contextos para autenticação e serviços para comunicação com backend.
Funcionalidades Avançadas

Implemente filtros, buscas e ordenações nas páginas de listagem.
Adicione upload/download de anexos.
Implemente exportação/importação de relatórios em Excel.
Build e Distribuição

Gere build com npm run build e empacote com Electron Forge.
Use setup.iss para criar instalador Windows.
7. Possíveis Melhorias
Permissões e papéis de usuário (admin/técnico).
Logs de auditoria detalhados.
Notificações (toast, e-mail, push).
Sincronização offline robusta.
Dashboard com gráficos interativos.
Backup/restauração do banco.
Aprimorar segurança (hash de senha, JWT, etc).
Internacionalização (i18n).
Testes automatizados (unitários/E2E).
Dark mode e acessibilidade.
Integração com outros sistemas (API externa).
8. Referências de Código
Backend: main.js, preload.js
Frontend: pages, components
Tipos: index.ts
Serviços: services
Instalação: setup.iss
